<?php namespace Namaskar;class MemPad{private $mpArr;private $mpFileName;public $mpContent;public $rootElements;public $elts;private $paths=[];private $urls=[];private $mpCurrentId;private $mpCurrentPath;private $mpNumPages;public function __construct($fileName){if(!file_exists($fileName)){die($fileName.' file not found');}$rawFile=file_get_contents($fileName);$this->mpFileName=$fileName;$rawPagesStart=strpos($rawFile,"\0\1")+1;$header=substr($rawFile,0,$rawPagesStart);if(strpos($header,"MeMpAd.")!==0){die("$fileName not an UTF-8 MeMpAd file.");}$this->mpCurrentId=intval(substr($header,7));$rawPages=substr($rawFile,$rawPagesStart,-1);$arr=explode("\0",$rawPages);$this->mpArr=&$arr;$this->mpNumPages=count($arr)/2;$t=[];$l=[];$this->mpContent=[];$c=&$this->mpContent;$this->elts=[];foreach($arr as $key=>$value){if($key%2===0){$l[]=ord($value);$t[]=substr($value,1);}else{$c[]=$value;}}$m=[];$elts=[];$path=[];$url=[];$levelpointer=[];$parent=null;$elt=null;foreach($t as $id=>$title){$level=$l[$id];while(count($path)>=$level){array_pop($path);array_pop($url);array_pop($levelpointer);}$slug=$this->slugify($title);$path[]=$title;$url[]=$slug;$count=count($path);$pathstr=trim(implode('/',$path),'/');$urlstr=trim(implode('/',$url),'/');if($urlstr==="")$urlstr="/";$elts[]=(object)['id'=>$id,'title'=>$title,'slug'=>$slug,'level'=>$level,'url'=>$urlstr,'path'=>$pathstr,'children'=>[],'parent'=>null];$elt=&$elts[$id];$this->paths[$pathstr]=&$elts[$id];$this->urls[$urlstr]=&$elts[$id];if($count===1){$this->rootElements[]=&$elt;$levelpointer[0]=$id;continue;}$levelpointer[]=$id;$parentId=$levelpointer[$level-2];$elts[$parentId]->children[]=$elt;$elts[$id]->parent=$parentId;}$this->elts=&$elts;}public function query($fields){$res=[];$patterns=[];$limit=-1;if(isset($fields['limit'])){$limit=array_pop($fields);}foreach($fields as $field=>$pattern){$pattern=preg_quote($pattern,'@');$pattern=str_replace('\*','.*?',$pattern);$patterns[$field]=$pattern;}foreach($this->elts as $id=>&$elt){$ok=true;foreach($patterns as $field=>$pattern){$ok=preg_match('@^'.$patterns[$field].'$@i',$elt->$field);if(!$ok)break;}if($ok){$res[]=&$elt;$limit--;if($limit===0)break;}}return $res;}public function reactSortableTreeSave($data){$json=json_decode($data,true);$data=$json['treeData'];$currentId=$json['currentId'];$found=false;$counter=0;$str='';$this->reactSortableTreeJsonSave($data,1,$currentId,$str,$counter,$found);if($found===false)$currentId=0;$numBytes=@file_put_contents($this->mpFileName,"MeMpAd.".($currentId)."\0\0".$str);if($numBytes===false){return json_encode(["status"=>"error","message"=>"could not saved data"]);}return json_encode(["status"=>"ok","message"=>"Data Saved"]);}private function reactSortableTreeJsonSave(&$data,$level,&$currentId,&$str,&$counter,&$found){foreach($data as $key=>$value){$id=$value['id'];$title=$value['title'];$children=$value['children']?? null;$contentStr=$value['content']?? null;if($contentStr===null){$contentStr=($id>-1)?$this->mpContent[$id]:'';}if($id===$currentId&&!$found){$currentId=$counter;$found=true;}$counter++;$str.=chr($level).$title.chr(0).$contentStr.chr(0);if($children){$this->reactSortableTreeJsonSave($children,$level+1,$currentId,$str,$counter,$found);}}}public function getStructureAsJson(){$elts=[];foreach($this->elts as $key=>$elt){if($elt->level===1)$elts[]=$elt;}$json='{"elements": '.json_encode($elts).', "currentId":'.$this->mpCurrentId.' }';return $json;}public function getContentById($id){return $this->mpContent[$id]?? null;}public function getElementById($id){return $this->elts[$id]?? null;}public function getElementByPath($path){$res=&$this->paths[$path]?? null;return $res;}public function getContentByPath($path){$id=&$this->paths[$path]->id ?? null;return $this->mpContent[$id]?? null;}public function getElementByUrl($url){$url=trim($url,'/');if($url==="")$url="/";$res=&$this->urls[$url]?? null;return $res;}public function&find($key,$val){$val=trim($val,'/');echo" ($key ::: $val)";if($val==='azankaraplop'){$val=null;return $val;}if($key==='path'){$res=&$this->paths[$val]?? null;return $res;}if($key==='url'){$res=&$this->urls[$val]?? null;return $res;}foreach($this->elts as $id=>&$elt){if($elt&&$elt[$key]===$val){return $elt;}}$val=null;return $val;}public function getSibblings($id){$pid=$this->elts[$id]->parent;if($pid===null)return $this->getRootElements();return $this->elts[$id]->parent->children;}public function&getRootElements(){return $this->rootElements;}public function&getParent($id){$pid=$this->elts[$id]->parent;return $this->elts[$pid]?? null;}public function&getChildren($id){return $this->elts[$id]['children'];}function slugify($string,$delimiter='-'){$oldLocale=setlocale(LC_ALL,'0');setlocale(LC_ALL,'en_US.UTF-8');$clean=iconv('UTF-8','ASCII//TRANSLIT',$string);$clean=preg_replace("/[^a-zA-Z0-9\/_\.|+ -]/",'',$clean);$clean=strtolower($clean);$clean=preg_replace("/[\/_|+ -]+/",$delimiter,$clean);$clean=trim($clean,$delimiter);setlocale(LC_ALL,$oldLocale);return $clean;}static public function merge(){$start=microtime(true);$args=func_get_args();$Mergedfile=array_shift($args);$str="MeMpAd.0\0\0";foreach($args as $key=>$filename){$mp=new MemPad($filename);$filename=basename($filename);echo"FILE: $filename... \n";$str.="\1$filename\0\0";foreach($mp->elts as $id=>&$elt){$content=$mp->mpContent[$id];$str.=chr($elt->level+1).$elt->title."\0$content\0";}}file_put_contents($Mergedfile,$str);$time=((microtime(true)-$start)*1000);echo "TIME".round($time)."ms";}}